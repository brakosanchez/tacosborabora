'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import Card from '@/components/ui/Card';
import Input from '@/components/ui/Input';
import Button from '@/components/ui/Button';
import Alert from '@/components/ui/Alert';
import { useAuth } from '@/context/AuthContext';

export default function RegisterPage() {
  const router = useRouter();
  const auth = useAuth();
  const [formData, setFormData] = useState({
    full_name: '',
    email: '',
    phone: '',
    street_address: '',
    neighborhood: '',
    allergies: [] as string[],
    password: '',
    confirm_password: '',
  });
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  const validateField = (name: string, value: string | string[]) => {
    let error = '';

    switch (name) {
      case 'email':
        if (typeof value === 'string' && !value.includes('@')) {
          error = 'El correo electrónico debe contener @';
        }
        break;
      case 'phone':
        if (typeof value === 'string' && value.length !== 10) {
          error = 'El teléfono debe tener 10 dígitos';
        }
        break;
      case 'password':
        if (typeof value === 'string' && value.length < 8) {
          error = 'La contraseña debe tener al menos 8 caracteres';
        }
        break;
      case 'confirm_password':
        if (value !== formData.password) {
          error = 'Las contraseñas no coinciden';
        }
        break;
      case 'street_address':
        if (typeof value === 'string' && value.length < 5) {
          error = 'La dirección debe tener al menos 5 caracteres';
        }
        break;
      case 'neighborhood':
        if (typeof value === 'string' && value.length < 3) {
          error = 'La colonia debe tener al menos 3 caracteres';
        }
        break;
      case 'allergies':
        if (Array.isArray(value) && value.length === 0) {
          error = 'Por favor, selecciona al menos una alergia';
        } else if (Array.isArray(value)) {
          const invalidAllergies = value.filter(allergy => !['cacahuate', 'piña'].includes(allergy));
          if (invalidAllergies.length > 0) {
            error = 'Solo se permiten las alergias: cacahuate, piña';
          }
        }
        break;
      case 'full_name':
        if (typeof value === 'string' && value.length < 2) {
          error = 'El nombre debe tener al menos 2 caracteres';
        }
        break;
    }

    return error;
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    const error = validateField(name, value);

    setFormData(prev => ({
      ...prev,
      [name]: value
    }));

    if (error) {
      setError(error);
    } else {
      setError('');
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    // Validar todos los campos
    const validations = {
      email: validateField('email', formData.email),
      phone: validateField('phone', formData.phone),
      password: validateField('password', formData.password),
      confirm_password: validateField('confirm_password', formData.confirm_password),
      street_address: validateField('street_address', formData.street_address),
      neighborhood: validateField('neighborhood', formData.neighborhood),
    };

    const validationErrors = Object.values(validations).filter(Boolean);

    if (validationErrors.length > 0) {
      setError(validationErrors[0]);
      return;
    }

    try {
      const dataToSend = {
        email: formData.email.trim(),
        full_name: formData.full_name.trim(),
        phone: formData.phone.trim(),
        street_address: formData.street_address.trim(),
        neighborhood: formData.neighborhood.trim(),
        allergies: formData.allergies.length > 0 ? formData.allergies : ['ninguna'],
        password: formData.password.trim(),
        confirm_password: formData.confirm_password.trim(),
        role: 'customer'
      };

      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/auth/register`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(dataToSend),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Error al registrar el usuario');
      }

      setSuccess('¡Registro exitoso! Redirigiendo al inicio de sesión...');
      setTimeout(() => {
        router.push('/login');
      }, 2000);
    } catch (error) {
      console.error('Error en la petición:', error);
      setError('Error al registrar el usuario. Por favor, inténtalo de nuevo.');
    }
  };

  return (
    <div className="min-h-screen bg-gray-900 py-8 px-4 sm:px-6 lg:px-8">
      <div className="max-w-4xl mx-auto">
        <div className="text-center mb-8">
          <h1 className="text-3xl font-extrabold text-white">Crear Cuenta</h1>
          <p className="mt-2 text-sm text-gray-300">
            ¿Ya tienes una cuenta?{' '}
            <Link href="/login" className="font-medium text-indigo-400 hover:text-indigo-300">
              Inicia sesión aquí
            </Link>
          </p>
        </div>

        <Card className="p-8 bg-gray-800">
          {error && (
            <div className="mb-4">
              <Alert type="error" message={error} />
            </div>
          )}
          {success && (
            <div className="mb-4">
              <Alert type="success" message={success} />
            </div>
          )}

          <form className="space-y-6" onSubmit={handleSubmit}>
            <div className="grid grid-cols-1 gap-6 sm:grid-cols-2">
              <div>
                <label htmlFor="full_name" className="block text-sm font-medium text-gray-300 mb-1">
                  Nombre completo
                </label>
                <Input
                  type="text"
                  id="full_name"
                  name="full_name"
                  value={formData.full_name}
                  onChange={handleChange}
                  className="w-full bg-gray-700 text-white border-gray-600 focus:ring-indigo-500 focus:border-indigo-500"
                />
              </div>

              <div>
                <label htmlFor="email" className="block text-sm font-medium text-gray-300 mb-1">
                  Correo electrónico
                </label>
                <Input
                  type="email"
                  id="email"
                  name="email"
                  value={formData.email}
                  onChange={handleChange}
                  className="w-full bg-gray-700 text-white border-gray-600 focus:ring-indigo-500 focus:border-indigo-500"
                />
              </div>

              <div>
                <label htmlFor="phone" className="block text-sm font-medium text-gray-300 mb-1">
                  Teléfono
                </label>
                <Input
                  type="tel"
                  id="phone"
                  name="phone"
                  value={formData.phone}
                  onChange={handleChange}
                  className="w-full bg-gray-700 text-white border-gray-600 focus:ring-indigo-500 focus:border-indigo-500"
                />
              </div>

              <div>
                <label htmlFor="street_address" className="block text-sm font-medium text-gray-300 mb-1">
                  Calle y número
                </label>
                <Input
                  type="text"
                  id="street_address"
                  name="street_address"
                  value={formData.street_address}
                  onChange={handleChange}
                  className="w-full bg-gray-700 text-white border-gray-600 focus:ring-indigo-500 focus:border-indigo-500"
                />
              </div>

              <div>
                <label htmlFor="neighborhood" className="block text-sm font-medium text-gray-300 mb-1">
                  Colonia o Fraccionamiento
                </label>
                <Input
                  type="text"
                  id="neighborhood"
                  name="neighborhood"
                  value={formData.neighborhood}
                  onChange={handleChange}
                  className="w-full bg-gray-700 text-white border-gray-600 focus:ring-indigo-500 focus:border-indigo-500"
                />
              </div>

              <div className="sm:col-span-2">
                <label htmlFor="allergies" className="block text-sm font-medium text-gray-300 mb-1">
                  Alergias (selecciona todas las que apliquen)
                </label>
                <select
                  id="allergies"
                  name="allergies"
                  multiple
                  value={formData.allergies}
                  onChange={(e) => {
                    const selectedOptions = Array.from(e.target.selectedOptions, option => option.value);
                    setFormData(prev => ({
                      ...prev,
                      allergies: selectedOptions
                    }));
                  }}
                  className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-600 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md bg-gray-700 text-white"
                >
                  <option value="cacahuate">Cacahuate</option>
                  <option value="piña">Piña</option>
                  <option value="ninguna">Ninguna</option>
                </select>
                <p className="mt-1 text-xs text-gray-400">Mantén presionada la tecla Ctrl (Windows) o Comando (Mac) para seleccionar múltiples opciones.</p>
              </div>

              <div>
                <label htmlFor="password" className="block text-sm font-medium text-gray-300 mb-1">
                  Contraseña
                </label>
                <Input
                  type="password"
                  id="password"
                  name="password"
                  value={formData.password}
                  onChange={handleChange}
                  className="w-full bg-gray-700 text-white border-gray-600 focus:ring-indigo-500 focus:border-indigo-500"
                />
              </div>

              <div>
                <label htmlFor="confirm_password" className="block text-sm font-medium text-gray-300 mb-1">
                  Confirmar contraseña
                </label>
                <Input
                  type="password"
                  id="confirm_password"
                  name="confirm_password"
                  value={formData.confirm_password}
                  onChange={handleChange}
                  className="w-full bg-gray-700 text-white border-gray-600 focus:ring-indigo-500 focus:border-indigo-500"
                />
              </div>
            </div>

            <div className="flex items-center">
              <input
                id="terms"
                name="terms"
                type="checkbox"
                required
                className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-600 rounded bg-gray-700"
              />
              <label htmlFor="terms" className="ml-2 block text-sm text-gray-300">
                Acepto los{' '}
                <a href="#" className="text-indigo-400 hover:text-indigo-300">
                  Términos y Condiciones
                </a>
              </label>
            </div>

            <div>
              <Button type="submit" className="w-full bg-indigo-600 hover:bg-indigo-700">
                Registrarse
              </Button>
            </div>
          </form>
        </Card>
      </div>
    </div>
  );
}
